#가계부 다이어리 작성 및 조회 기능
import datetime

class Diary:
    def __init__(self):
        self.entries = {} #다이어리 항목을 저장
        self.monthly_spending_goals = {} #월별 지출 목표를 저장

    def validate_date(self, date_str): #입력한 날짜 문자열이 올바른 형식인지 확인
        try:
            datetime.datetime.strptime(date_str, '%Y-%m-%d')
            return True
        except ValueError:
            return False

    def add_entry(self): #다이어리 내용 작성
        date_str = input("날짜를 입력하세요 (YYYY-MM-DD): ")
        if not self.validate_date(date_str):
            print("날짜 입력 형식에 맞지 않습니다. 다시 입력해주세요.")
            return

        while True:
            expenditure_input = input("지출을 입력하세요: ")
            if expenditure_input.replace('.', '', 1).isdigit():
                expenditure = float(expenditure_input)
                break
            else:
                print("숫자만 입력 가능합니다.")

        while True:
            income_input = input("수입을 입력하세요: ")
            if income_input.replace('.', '', 1).isdigit():
                income = float(income_input)
                break
            else:
                print("숫자만 입력 가능합니다.")

        self.entries[date_str] = {
            'expenditure': expenditure,
            'income': income
        }

        date_obj = datetime.datetime.strptime(date_str, '%Y-%m-%d')
        if date_obj.day == 1:
            last_month_total_expenditure = self.calculate_last_month_expenditure(date_obj)
            print(f"저번 달 총 지출 금액: {last_month_total_expenditure}")

            while True:
                try:
                    spending_goal = float(input("이번 달 목표 지출 금액을 입력하세요: "))
                    break
                except ValueError:
                    print("숫자만 입력 가능합니다.")

            self.monthly_spending_goals[date_obj.strftime('%Y-%m')] = spending_goal

        print("다이어리 작성이 완료되었습니다.")

    def calculate_last_month_expenditure(self, date_obj): #입력한 날짜 이전 달의 총 지출 금액을 계산
        last_month = (date_obj.replace(day=1) - datetime.timedelta(days=1)).strftime('%Y-%m')
        total_expenditure = 0.0
        for date_str, entry in self.entries.items():
            if date_str.startswith(last_month):
                total_expenditure += entry['expenditure']
        return total_expenditure

    def view_entry(self): #입력한 날짜에 작성했던 다이어리를 조회
        date_str = input("조회할 날짜를 입력하세요 (YYYY-MM-DD): ")
        if not self.validate_date(date_str):
            print("날짜 입력 형식에 맞지 않습니다. 다시 입력해주세요.")
            return

        entry = self.entries.get(date_str)
        if entry:
            print(f"날짜: {date_str}")
            print(f"지출: {entry['expenditure']}")
            print(f"수입: {entry['income']}")
            print("다이어리 조회가 완료되었습니다.")
        else:
            print("해당 날짜에 작성된 다이어리가 없습니다.")

def main():
    diary = Diary()
    while True:
        print("\n**** 가계부 다이어리 ****")
        print("1. 다이어리 작성하기")
        print("2. 다이어리 조회하기")
        print("3. 종료하기")
        choice = input("선택하세요: ")

        if choice == '1':
            diary.add_entry()
        elif choice == '2':
            diary.view_entry()
        elif choice == '3':
            print("가계부 다이어리 기능을 종료합니다.")
            break
        else:
            print("잘못된 선택입니다. 다시 입력해주세요.")

if __name__ == "__main__":
    main()